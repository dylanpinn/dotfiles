" --------------------
"  Dylan Pinn's Vimrc
" --------------------
"
" It's purpose is to be a light weight as possible and to try to utilise
" native Vim functionality as much as possible, before looking at extending
" it.
"

" I have taken inspiration from Tom Ryder (terj)'s literate vimrc
" (https://dev.sanctum.geek.nz/cgit/dotfiles.git/tree/vim/vimrc), mainly
" around liberal use of comments to describe the purpose of each change.
"

" These first set of changes are to cleanup vim's presence in the $HOME
" directory, try to utilise some sensible defaults based on XDG base
" directories:
"
" > https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
"

" Moving viminfo out of $HOME, has a dual purpose of tidying the top-level
" directory and moving it rightfully into the XDG_STATE_HOME directory for
" peristant generated state.
"
" This directory should be created during the initial setup of the dotfiles.
"
set viminfofile=$XDG_STATE_HOME/vim/viminfo

" Enable automatic backups before overwriting a file and leave it around after
" the file has been written.
"
" We will also want to move these backup files to the $XDG_CACHE_HOME
" directory.  This directory is created during dotfile installation.
"
" The double trailing slashes will tell Vim to use the full escaped path of
" the file to avoid collisions.
"
set backup
set backupdir=$XDG_STATE_HOME/vim/backup//

" Move swap files to a dedicated directory, rather than the default of the
" same directory as the source file.  This directory is created during dotfile
" installation.
"
" Add two trailing slashes to the path to tell Vim to use the full escaped
" path of the file to avoid collisions.
"
set directory=$XDG_STATE_HOME/vim/swap//

" Keep track of undo history for files between sessions.  This ensures that
" undo and redo are available between Vim invocations.  These files are kept
" in a cache directory.  This directory is created during dotfile
" installation.
"
" Add two trailing slashes to the path to tell Vim to use the full escaped
" path of the file to avoid collisions.
"
set undofile
set undodir=$XDG_STATE_HOME/vim/undo//

" Enable and use the built-in EditorConfig plugin. I might look only enabling
" this if it can find a .editorconfig file in the current directory.
packadd! editorconfig

" TODO: Have this change to sorbet or elflord when using dark background.
" colorscheme morning
colorscheme sorbet

" The rest of the file has been taken from $VIMRUNTIME/default.vim, with the
" intention of cleaning up and re-organising it all to give it a bit more
" logical ordering to it.
"
" TODO: Clean up and fleshout comments.
"

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

set history=200		" keep 200 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set wildmenu		" display completion matches in a status line

set ttimeout		" time out for key codes
set ttimeoutlen=100	" wait up to 100ms after Esc for special key

" Show @@@ in the last line if it is truncated.
set display=truncate

" Show a few lines of context around the cursor.  Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif

" Do not recognize octal numbers for Ctrl-A and Ctrl-X, most users find it
" confusing.
set nrformats-=octal

" Don't use Q for Ex mode, use it for formatting.  Except for Select mode.
" Revert with ":unmap Q".
map Q gq
sunmap Q

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
" Revert with ":iunmap <C-U>".
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine.  By enabling it you
" can position the cursor, Visually select and scroll with the mouse.
" Only xterm can grab the mouse events when using the shift key, for other
" terminals use ":", select text and press Esc.
if has('mouse')
  if &term =~ 'xterm'
    set mouse=a
  else
    set mouse=nvi
  endif
endif

" Only do this part when Vim was compiled with the +eval feature.
if 1

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Revert with ":filetype off".
  filetype plugin indent on

  " Put these in an autocmd group, so that you can revert them with:
  " ":autocmd! vimStartup"
  augroup vimStartup
    autocmd!

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid, when inside an event handler
    " (happens when dropping a file on gvim), for a commit or rebase message
    " (likely a different one than last time), and when using xxd(1) to filter
    " and edit binary files (it transforms input files back and forth, causing
    " them to have dual nature, so to speak)
    autocmd BufReadPost *
      \ let line = line("'\"")
      \ | if line >= 1 && line <= line("$") && &filetype !~# 'commit'
      \      && index(['xxd', 'gitrebase'], &filetype) == -1
      \ |   execute "normal! g`\""
      \ | endif

  augroup END

  " Quite a few people accidentally type "q:" instead of ":q" and get confused
  " by the command line window.  Give a hint about how to get out.
  " If you don't like this you can put this in your vimrc:
  " ":autocmd! vimHints"
  augroup vimHints
    au!
    autocmd CmdwinEnter *
	  \ echohl Todo |
	  \ echo gettext('You discovered the command-line window! You can close it with ":q".') |
	  \ echohl None
  augroup END

endif

" Switch syntax highlighting on when the terminal has colors or when using the
" GUI (which always has colors).
if &t_Co > 2 || has("gui_running")
  " Revert with ":syntax off".
  syntax on

  " I like highlighting strings inside C comments.
  " Revert with ":unlet c_comment_strings".
  let c_comment_strings=1
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
" Revert with: ":delcommand DiffOrig".
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

if has('langmap') && exists('+langremap')
  " Prevent that the langmap option applies to characters that result from a
  " mapping.  If set (default), this may break plugins (but it's backward
  " compatible).
  set nolangremap
endif
